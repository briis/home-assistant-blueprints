blueprint:
  name: Zigbee2Mqtt LK Fuga Wiser 4-Button Switch for Light, Dimming and control of an input select
  description: >
    #### Automate Schneider Wiser 4-Button Battery Switch by Zigbee2Mqtt events.

    This Blueprint is specific for controlling Lights. It support 2 different light (or Light Groups). One for the Upper Bar and one for the Lower Bar. 

    The Buttons are paired as follows:

    * Upper Left button Short Press: Turn On Light 1

    * Upper Right button Short Press: Turn of Light 1

    * Upper Left button Long Press: Dim the Light 1 Up

    * Upper Right button Long Press: Dim the Light 1 down

    * Lower Left button Short Press: Select Value for Input Select

    * Lower Right button Short Press: Select Value for Input Select

    * Lower Left button Long Press: Select Value for Input Select

    * Lower Right button Long Press: Select Value for Input Select

  domain: automation
  input:
    schneider_wiser_sw:
      name: LK Fuga Wiser Battery Operated 4-button Device
      description: MQTT Action topic to listen for (Ex. zigbee2mqtt/fuga_switch/action)
      selector:
        text:
    light_device_1:
      name: Light(s) for the Upper Bar
      description: Choose the Light entities to be controlled by the Upper Bar buttons
      selector:
        target:
          entity:
            domain: light
    color_light_1:
      name: Color Temperature for Light
      description: Color temperature in mireds.
      default: 350
      selector:
        color_temp:
          min_mireds: 160
          max_mireds: 500
    brightness_light_1:
      name: Brightness for Light
      description: Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
      default: 90
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 5
    step_size:
      name: Brightness step value
      description: Change brightness by an amount.
      default: 25
      selector:
        number:
          min: 5
          max: 50
          step: 5
    input_select_device:
      name: Input Select for the Lower Bar
      description: Choose the Input Select entity to be controlled by the Lower Bar buttons
      default: {}
      selector:
        target:
          entity:
            domain: input_select
    ls_select_value:
      name: Select Value for Left Short Press
      description: Select a Value to be set when doing a Short Press on the Lower Left button
      selector:
        select:
          options:
            - "Lukket"
            - "40% åben"
            - "75% åben"
            - "100% åben"
    ll_select_value:
      name: Select Value for Left Long Press
      description: Select a Value to be set when doing a Long Press on the Lower Left button
      selector:
        select:
          options:
            - "Lukket"
            - "40% åben"
            - "75% åben"
            - "100% åben"
    rs_select_value:
      name: Select Value for Right Short Press
      description: Select a Value to be set when doing a Short Press on the Lower Right button
      selector:
        select:
          options:
            - "Lukket"
            - "40% åben"
            - "75% åben"
            - "100% åben"
    rl_select_value:
      name: Select Value for Right Long Press
      description: Select a Value to be set when doing a Long Press on the Lower Right button
      selector:
        select:
          options:
            - "Lukket"
            - "40% åben"
            - "75% åben"
            - "100% åben"
  source_url: https://github.com/briis/home-assistant-blueprints/blob/main/zha-Wiser-4-button-switch-light-input_select-control.yaml
mode: restart
max_exceeded: silent
trigger:
  # button_UL_short_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: on_top
    id: ul_short
  # button_LL_short_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: on_bottom
    id: ll_short
  # button_UR_short_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: off_top
    id: ur_short
  # button_LR_short_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: off_bottom
    id: lr_short
  # button_UL_long_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_move_up_top
    id: ul_long
  # button_UR_long_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_move_down_top
    id: ur_long
  # button_LL_long_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_move_up_bottom
    id: ll_long
  # button_LR_long_press
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_move_down_bottom
    id: lr_long
  # button_L_stop
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_stop_bottom
    id: l_stop
  # button_U_stop
  - platform: mqtt
    topic: !input schneider_wiser_sw
    payload: brightness_stop_top
    id: u_stop
action:
  - variables:
      light_upper: !input light_device_1
      step_size: !input step_size
      step_up: "{{ step_size * 1 }}"
      step_down: "{{ step_size * -1 }}"
      dim_delay: 500
      ls_select_value: !input ls_select_value
      ll_select_value: !input ll_select_value
      rs_select_value: !input rs_select_value
      rl_select_value: !input rl_select_value
  - choose:
      - conditions:
          - condition: trigger
            id: ul_short
        sequence:
          - service: light.turn_on
            data:
              color_temp: !input color_light_1
              brightness_pct: !input brightness_light_1
            target: !input light_device_1
      - conditions:
          - condition: trigger
            id: ur_short
        sequence:
          - service: light.turn_off
            data: {}
            target: !input light_device_1
      - conditions:
          - condition: trigger
            id: ul_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: ul_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_up }}"
                  target: !input light_device_1
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
      - conditions:
          - condition: trigger
            id: ur_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: ur_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_down }}"
                  target: !input light_device_1
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
      - conditions:
          - condition: trigger
            id: ll_short
        sequence:
          - service: input_select.select_option
            data:
              option: "{{ ls_select_value }}"
            target: !input input_select_device
      - conditions:
          - condition: trigger
            id: lr_short
        sequence:
          - service: input_select.select_option
            data:
              option: "{{ rs_select_value }}"
            target: !input input_select_device
      - conditions:
          - condition: trigger
            id: ll_long
        sequence:
          - service: input_select.select_option
            data:
              option: "{{ ll_select_value }}"
            target: !input input_select_device
      - conditions:
          - condition: trigger
            id: lr_long
        sequence:
          - service: input_select.select_option
            data:
              option: "{{ rl_select_value }}"
            target: !input input_select_device
