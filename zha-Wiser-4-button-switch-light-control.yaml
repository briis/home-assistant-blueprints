blueprint:
  name: ZHA LK Fuga Wiser 4-Button Switch for Light and Dimming
  description: >
    #### Automate Schneider Wiser 4-Button Battery Switch by ZHA events.

    This Blueprint is specific for controlling Lights. It support 2 different light (or Light Groups). One for the Upper Bar and one for the Lower Bar. 

    The Buttons are paired as follows:

    * Upper Left button Short Press: Turn On Light 1

    * Upper Right button Short Press: Turn of Light 1

    * Upper Left button Long Press: Dim the Light 1 Up

    * Upper Right button Long Press: Dim the Light 1 down

    * Lower Left button Short Press: Turn On Light 2

    * Lower Right button Short Press: Turn of Light 2

    * Lower Left button Long Press: Dim the Light 2 Up

    * Lower Right button Long Press: Dim the Light 2 down

  domain: automation
  input:
    schneider_wiser_sw:
      name: LK Fuga Wiser Battery Operated 4-button Device
      description: Schneider LK Fuga Wiser 4-Button 555 D 6001 or 555 D 0001
      selector:
        device:
          filter:
            integration: zha
            manufacturer: Schneider Electric
            model: FLS/AIRLINK/4
          multiple: false
    light_device_1:
      name: Light(s) for the Upper Bar
      description: Choose the Light entities to be controlled by the Upper Bar buttons
      selector:
        target:
          entity:
            domain: light
    color_light_1:
      name: Color Temperature for Light 1
      description: Color temperature in mireds.
      default: 350
      selector:
        color_temp:
          min_mireds: 160
          max_mireds: 500
    brightness_light_1:
      name: Brightness for Light 1
      description: Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
      default: 90
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 5
    light_device_2:
      name: Light(s) for the Lower Bar
      description: Choose the Light entities to be controlled by the Lower Bar buttons
      default: {}
      selector:
        target:
          entity:
            domain: light
    color_light_2:
      name: Color Temperature for Light 2
      description: Color temperature in mireds.
      default: 350
      selector:
        color_temp:
          min_mireds: 160
          max_mireds: 500
    brightness_light_2:
      name: Brightness for Light 2
      description: Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
      default: 90
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 5
    step_size:
      name: Brightness step value
      description: Change brightness by an amount.
      default: 25
      selector:
        number:
          min: 5
          max: 50
          step: 5
  source_url: https://github.com/briis/home-assistant-blueprints/blob/main/zha-Wiser-4-button-switch-light-control.yaml
mode: restart
max_exceeded: silent
trigger:
  # button_UL_short_press
  - platform: event
    event_type: zha_event
    id: ul_short
    event_data:
      device_id: !input schneider_wiser_sw
      command: "on"
      endpoint_id: 21
  # button_LL_short_press
  - platform: event
    event_type: zha_event
    id: ll_short
    event_data:
      device_id: !input schneider_wiser_sw
      command: "on"
      endpoint_id: 22
  # button_UR_short_press
  - platform: event
    event_type: zha_event
    id: ur_short
    event_data:
      device_id: !input schneider_wiser_sw
      command: "off"
      endpoint_id: 21
  # button_LR_short_press
  - platform: event
    event_type: zha_event
    id: lr_short
    event_data:
      device_id: !input schneider_wiser_sw
      command: "off"
      endpoint_id: 22
  # button_UL_long_press
  - platform: event
    event_type: zha_event
    id: ul_long
    event_data:
      device_id: !input schneider_wiser_sw
      command: "move_with_on_off"
      endpoint_id: 21
  # button_UR_long_press
  - platform: event
    event_type: zha_event
    id: ur_long
    event_data:
      device_id: !input schneider_wiser_sw
      command: "move"
      endpoint_id: 21
  # button_LL_long_press
  - platform: event
    event_type: zha_event
    id: ll_long
    event_data:
      device_id: !input schneider_wiser_sw
      command: "move_with_on_off"
      endpoint_id: 22
  # button_LR_long_press
  - platform: event
    event_type: zha_event
    id: lr_long
    event_data:
      device_id: !input schneider_wiser_sw
      command: "move"
      endpoint_id: 22
  # button_L_stop
  - platform: event
    event_type: zha_event
    id: l_stop
    event_data:
      device_id: !input schneider_wiser_sw
      command: "stop"
      endpoint_id: 22
  # button_U_stop
  - platform: event
    event_type: zha_event
    id: u_stop
    event_data:
      device_id: !input schneider_wiser_sw
      command: "stop"
      endpoint_id: 21
action:
  - variables:
      light_upper: !input light_device_1
      light_lower: !input light_device_2
      step_size: !input step_size
      step_up: "{{ step_size * 1 }}"
      step_down: "{{ step_size * -1 }}"
      dim_delay: 500
  - choose:
      - conditions:
          - condition: trigger
            id: ul_short
        sequence:
          - service: light.turn_on
            data:
              color_temp: !input color_light_1
              brightness_pct: !input brightness_light_1
            target: !input light_device_1
      - conditions:
          - condition: trigger
            id: ur_short
        sequence:
          - service: light.turn_off
            data: {}
            target: !input light_device_1
      - conditions:
          - condition: trigger
            id: ul_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: ul_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_up }}"
                  target: !input light_device_1
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
      - conditions:
          - condition: trigger
            id: ur_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: ur_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_down }}"
                  target: !input light_device_1
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
      - conditions:
          - condition: trigger
            id: ll_short
        sequence:
          - service: light.turn_on
            data:
              color_temp: !input color_light_2
              brightness_pct: !input brightness_light_2
            target: !input light_device_2
      - conditions:
          - condition: trigger
            id: lr_short
        sequence:
          - service: light.turn_off
            data: {}
            target: !input light_device_2
      - conditions:
          - condition: trigger
            id: ll_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: ll_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_up }}"
                  target: !input light_device_2
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
      - conditions:
          - condition: trigger
            id: lr_long
        sequence:
          - repeat:
              while:
                - condition: trigger
                  id: lr_long
              sequence:
                - service: light.turn_on
                  data:
                    transition: 1
                    brightness_step: "{{ step_down }}"
                  target: !input light_device_2
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: "{{ dim_delay | float }}"
